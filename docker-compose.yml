services:
  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb_container
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  # Elasticsearch
  elastic:
    image: elasticsearch:8.15.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"

  # Kibana
  kibana:
    image: kibana:8.15.2
    container_name: kibana
    depends_on:
      - elastic
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic:9200

  # Scraper : ARTISTS
  artists_spider:
    build:
      context: .
      dockerfile: scraper/Dockerfile
    depends_on:
      - mongodb
    command: sh -c "cd /app/scraper && pipenv run scrapy crawl artists -s SCRAPY_SETTINGS_MODULE=scraper.settings"
    volumes:
      - ./scraper/output:/app/output

  # Scraper : COUNTRIES
  countries_spider:
    build:
      context: .
      dockerfile: scraper/Dockerfile
    depends_on:
      - mongodb
    command: sh -c "cd /app/scraper && pipenv run scrapy crawl countries -s SCRAPY_SETTINGS_MODULE=scraper.settings"
    volumes:
      - ./scraper/output:/app/output

  # Scraper : LISTENERS
  listeners_spider:
    build:
      context: .
      dockerfile: scraper/Dockerfile
    depends_on:
      - mongodb
    command: sh -c "cd /app/scraper && pipenv run scrapy crawl listeners -s SCRAPY_SETTINGS_MODULE=scraper.settings"
    volumes:
      - ./scraper/output:/app/output

  # IMPORTER MongoDB 
  mongo_importer:
    build:
      context: ./MongoDB
      dockerfile: Dockerfile
    depends_on:
      artists_spider:
        condition: service_completed_successfully  
    environment:
      - MONGO_URI=mongodb://mongodb:27017
      - MONGO_DATABASE=scrapy_data
    volumes:
      - ./scraper/output:/app/output
    command: sh -c "sleep 10 && python Mongo.py" 

  # IMPORTER Elasticsearch
  elastic_importer:
    build:
      context: ./ElasticSearch
      dockerfile: Dockerfile
    depends_on:
      artists_spider:
        condition: service_completed_successfully  
      mongo_importer:
        condition: service_completed_successfully 
    environment:
      - ELASTICSEARCH_HOST=http://elastic:9200
    volumes:
      - ./scraper/output:/app/output
    command: sh -c "sleep 5 && python ElasticSearch.py" 

  # FLASK APP 
  flask_app:
    build:
      context: ./API
      dockerfile: Dockerfile
    container_name: flask_app
    ports:
      - "5050:5050"
    depends_on:
      elastic_importer:
        condition: service_completed_successfully 
    environment:
      - FLASK_ENV=production
      - ELASTICSEARCH_HOST=http://elastic:9200
    volumes:
      - ./API:/app  
    command: sh -c "sleep 10 && python app.py" 

volumes:
  mongodb_data:
